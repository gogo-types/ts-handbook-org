import{_ as s,c as a,b as t,o as p}from"./app-Cq7ki01C.js";const e={};function o(l,n){return p(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="리터럴-타입" tabindex="-1"><a class="header-anchor" href="#리터럴-타입"><span>리터럴 타입</span></a></h1><h2 id="📖-1-리터럴-타입" tabindex="-1"><a class="header-anchor" href="#📖-1-리터럴-타입"><span>📖 1. 리터럴 타입?</span></a></h2><p><strong>리터럴 타입(Literal Types)</strong> 이란 Typescript에서 특정 값만을 가지는 타입을 정의해주는 기능으로, 구체적이고 제한적인 타입을 만들 수 있습니다. 리터럴 타입에는 문자열, 숫자, 불리언 등 다양한 기본 타입을 적용할 수 있습니다.</p><hr><h2 id="📖-2-리터럴-타입-종류" tabindex="-1"><a class="header-anchor" href="#📖-2-리터럴-타입-종류"><span>📖 2. 리터럴 타입 종류</span></a></h2><h3 id="🚀-문자열-리터럴-타입" tabindex="-1"><a class="header-anchor" href="#🚀-문자열-리터럴-타입"><span>🚀 문자열 리터럴 타입</span></a></h3><p><strong>문자열 리터럴 타입(String Literal Types)</strong> 은 문자열 값만을 허용하는 타입입니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">MoveMent</span> <span class="token operator">=</span> <span class="token string">&quot;Attack&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Defend&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Exit&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Literal</span><span class="token punctuation">(</span>direction<span class="token operator">:</span> MoveMent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You chose to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>direction<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">Literal</span><span class="token punctuation">(</span><span class="token string">&quot;Attack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token function">Literal</span><span class="token punctuation">(</span><span class="token string">&quot;Defend&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token function">Literal</span><span class="token punctuation">(</span><span class="token string">&quot;Exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token comment">// Literal(&quot;Run&quot;); // Error: Argument of type &#39;&quot;Run&quot;&#39; is not assignable to parameter of type &#39;MoveMent&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🚀-숫자형-리터럴-타입" tabindex="-1"><a class="header-anchor" href="#🚀-숫자형-리터럴-타입"><span>🚀 숫자형 리터럴 타입</span></a></h3><p><strong>숫자형 리터럴 타입(Number Literal Types)</strong> 은 숫자 값만을 허용하는 타입입니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">statusCode</span> <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">|</span> <span class="token number">400</span> <span class="token operator">|</span> <span class="token number">404</span> <span class="token operator">|</span> <span class="token number">500</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span>code<span class="token operator">:</span> statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">상태 코드: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">response</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token function">response</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token comment">// response(5000); // Error: Argument of type &#39;5000&#39; is not assignable to parameter of type &#39;statusCode&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🚀-불리언-리터럴-타입" tabindex="-1"><a class="header-anchor" href="#🚀-불리언-리터럴-타입"><span>🚀 불리언 리터럴 타입</span></a></h3><p><strong>불리언 리터럴 타입(Boolean Literal Types)</strong> 은 참(true) 또는 거짓(false)만을 허용하는 타입입니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">isActive</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CheckStatus</span><span class="token punctuation">(</span>status<span class="token operator">:</span> isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Status is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">CheckStatus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token function">CheckStatus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token comment">// CheckStatus(&quot;true&quot;); // Error: Argument of type &#39;&quot;true&quot;&#39; is not assignable to parameter of type &#39;isActive&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🚀-객체형-리터럴-타입" tabindex="-1"><a class="header-anchor" href="#🚀-객체형-리터럴-타입"><span>🚀 객체형 리터럴 타입</span></a></h3><p><strong>객체형 리터럴 타입(Object Literal Type)</strong> 은 객체의 속성에 대해 정의할 수 있습니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Pack</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  juice<span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;strawberry&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">&quot;small&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;medium&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Large&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pickA<span class="token operator">:</span> Pack <span class="token operator">=</span> <span class="token punctuation">{</span> juice<span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">&quot;Large&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pickA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { juice: &#39;apple&#39;, package: &#39;Large&#39; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📖-3-리터럴-타입과-유니온-타입" tabindex="-1"><a class="header-anchor" href="#📖-3-리터럴-타입과-유니온-타입"><span>📖 3. 리터럴 타입과 유니온 타입</span></a></h2><p>리터럴 타입은 유니온 타입과 함께 사용되어 여러 값들을 허용할 수 있습니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">StarCraft</span> <span class="token operator">=</span> <span class="token string">&quot;zerg&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;terran&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;protoss&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">play</span><span class="token punctuation">(</span>select<span class="token operator">:</span> StarCraft<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You selected: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>select<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">&quot;zerg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">&quot;terran&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">&quot;protoss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></span>
<span class="line"><span class="token comment">// play(&quot;orc&quot;); // Error: Argument of type &#39;&quot;orc&quot;&#39; is not assignable to parameter of type &#39;StarCraft&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-요약" tabindex="-1"><a class="header-anchor" href="#✅-요약"><span>✅ 요약</span></a></h2><ul><li>리터럴 타입을 활용해 API 응답 처리, 상태 관리, 이벤트 핸들링 등 유용하게 사용 가능</li><li>이를 통해 코드의 안정성과 예상치 못한 에러를 방지</li><li><strong>Typescript</strong>에서 리터럴 타입은 특정 값만을 허용하는 타입을 정의</li><li>더 안전하고 직관적인 코드를 작성해 타입에 맞게 리터럴 활용</li></ul>`,24)])])}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/step/basic-types/literal.html","title":"리터럴 타입","lang":"en-US","frontmatter":{},"git":{"updatedTime":1757667103000,"contributors":[{"name":"Koras02","username":"Koras02","email":"wjdgh0727@gmail.com","commits":1,"url":"https://github.com/Koras02"}],"changelog":[{"hash":"e7dc3ffbb1755b67eb2620afb39d73500f3ef4b7","time":1757667103000,"email":"wjdgh0727@gmail.com","author":"Koras02","message":"literal add"}]},"filePathRelative":"step/basic-types/literal.md"}');export{i as comp,u as data};
