import{_ as s,c as a,d as t,o as p}from"./app-DrnPukMZ.js";const e={};function o(l,n){return p(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="기본적인-타입들" tabindex="-1"><a class="header-anchor" href="#기본적인-타입들"><span>기본적인 타입들</span></a></h1><h2 id="_1-불리언-타입-boolean" tabindex="-1"><a class="header-anchor" href="#_1-불리언-타입-boolean"><span>1. 불리언 타입(Boolean)</span></a></h2><p>Boolean 타입은 타입스크립트의 가장 기본적인 데이터 타입이며 참과 거짓을 정의할 때 사용합니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> isTrue<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isTrue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-숫자-number" tabindex="-1"><a class="header-anchor" href="#_2-숫자-number"><span>2. 숫자(Number)</span></a></h2><p>타입스크립트는 자바스크립트와 같이 모든 숫자가 부동 소수점 방식이며, 부동 소수점에는 <strong>number</strong>라는 타입이 붙혀집니다. Typescript에는 16진수, 10진수 리터럴에 더불어, ECMAScript 2015에서 소개된 2진수, 8진수 리터럴도 지원합니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> eleven<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> hexresult<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0x0042</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> binary<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> octal<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o774</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eleven<span class="token punctuation">,</span> hexresult<span class="token punctuation">,</span> binary<span class="token punctuation">,</span> octal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-문자열-string" tabindex="-1"><a class="header-anchor" href="#_3-문자열-string"><span>3. 문자열(String)</span></a></h2><p>웹 페이지, 서버 같은 프로그램을 JS로 작업할 때 기본적으로 텍스트 데이터를 다루는 작업이 필요한데 ts에서는 텍스트 데이터 타입을 string으로 표현합니다. JS처럼 큰 따옴표(<code>&#39;&#39;</code>)나 작은 따옴표(<code>&#39;</code>) 로 문자열 데이터를 감싸데 사용합니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> color<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">;</span></span>
<span class="line">color <span class="token operator">=</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 템플릿 문자열을 사용하면 여러 줄에 걸쳐 문자열을 작성하고, 표현식을 포함시킬 수 있습니다. 문자열은 백터/백쿼드 문자로 감싸지며 <code>\${expr}</code>과 같은 형태로 표현할 수 있습니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> city<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> from<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;England&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> section<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>city<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> capital of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-배열-array" tabindex="-1"><a class="header-anchor" href="#_4-배열-array"><span>4. 배열(Array)</span></a></h2><p>배열 타입은 두 가지 방법이 있으며, 첫 번째는 배열 요소들을 나타내는 타입 뒤에 빈 배열(<code>[]</code>)을 쓰는 것입니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Create&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Update&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Delete&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 기본 출력</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>두 번째 방법은 재네릭 배열 방법입니다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Create&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Update&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Delete&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 기본 출력</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 배열 접근</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// generic</span></span>
<span class="line"><span class="token keyword">let</span> spicy <span class="token operator">=</span> <span class="token string">&quot;매운 맛&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> meek <span class="token operator">=</span> <span class="token string">&quot;순한 맛&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> noodles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">진라면 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>meek<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">진라면 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>spicy<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;삼양라면&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noodles<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)])])}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/basic-types/number.html","title":"기본적인 타입들","lang":"en-US","frontmatter":{},"git":{"updatedTime":1756679200000,"contributors":[{"name":"Koras02","username":"Koras02","email":"wjdgh0727@gmail.com","commits":1,"url":"https://github.com/Koras02"}],"changelog":[{"hash":"294e68d950842973c8fff6e2eb2194026b294a0f","time":1756679200000,"email":"wjdgh0727@gmail.com","author":"Koras02","message":"Deploy Vupress Typescript Handlebook"}]},"filePathRelative":"basic-types/number.md"}');export{i as comp,u as data};
